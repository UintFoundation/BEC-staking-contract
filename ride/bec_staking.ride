{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# constants
let separator = "__"
let SEP = "__"
let MULT6 = 1_000_000
let MULT8 = 1_0000_0000
let MULTX6 = MULT6.toBigInt()
let MULTX8 = MULT8.toBigInt()

# contract key
let keyOwner = "owner"
let keyInitHeight = "initialized_height"
let keyRewardPayouts = "reward_payouts" # in blocks

let owner = this.getStringValue(keyOwner).addressFromStringValue()
let BEC = base58'E3mLbKed5sHhtRn4aSCdZWy53CBhLiY934MN5ZksoWZY'
let USDT = base58'34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ'

func writeConstInt(key: String, value: Int) = if !isDefined(getInteger(this, key)) then IntegerEntry(key, value) else throw("already initialized: " + key)

# admin operations functions

@Callable(i)
func initialize(rewardPayoutsDistribution: Int) = {
  if (rewardPayoutsDistribution <= 0) 
    then throw("reward payouts distribution can not be negative")
  else [
    keyInitHeight.writeConstInt(height),
    IntegerEntry(keyRewardPayouts, rewardPayoutsDistribution),
    StringEntry(keyOwner, toBase58String(i.caller.bytes))
  ]
}

@Callable(i)
func deposit() = {
  if (i.caller != owner) 
    then throw("access denied, only owner can deposit")
  else if (i.payments.size() == 0) 
    then throw("Attached payment is required") 
  else {
    let pmt = i.payments[0];
    if (pmt.assetId == unit || pmt.assetId != USDT)
      then throw("unexpected assetId, expected: " + USDT.toUtf8String())
    else []
  }
}

@Callable(i)
func setOwner(newOwner: String) = {
  if (i.caller != owner) 
    then throw("access denied, only owner can transfer ownership")
  else if (addressFromStringValue(newOwner) == owner) 
    then throw("can set to the same address")
  else [
    StringEntry(keyOwner, newOwner)
  ]
}

@Callable(i)
func setRewardPayout(newValue: Int) = {
  if (i.caller != owner) 
    then throw("access denied, only admin set the duration")
  else if (newValue <= 0) 
    then throw("reward payouts distribution can not be negative")
  else [
    IntegerEntry(keyRewardPayouts, newValue)
  ]
}

# @Callable(i)
# func withdraw(amount: Int) = {
#   let currentKey = toBase58String(i.caller.bytes)
#   let currentAmount = match getInteger(this, currentKey) {
#     case a:Int => a
#     case _ => 0
#   }
#   let newAmount = currentAmount - amount
#   if (amount < 0)
#     then throw("Can't withdraw negative amount")
#     else if (newAmount < 0)
#       then throw("Not enough balance")
#       else (
#         [
#           IntegerEntry(currentKey, newAmount),
#           ScriptTransfer(i.caller, amount, unit)
#         ],
#         unit
#       )
# }

# exact 1 payment must be attached in BEC
@Callable(i)
func stake() = {
 []
}

# amount - how much BEC tokens will be unstaked, and rewards will be claimed
@Callable(i)
func unstake(amount: Int) = {
  []
}

# called by user to claim rewards accumulated
@Callable(i)
func claimReward() = {
  []
}

# utility method to get unclaimed user's rewards
@Callable(i)
func unclaimedRewards(userAddressStr: String) = {
  []
}

# Staking params for user
# [userBECAmount, totalBECStaked, stakingStartHeight)
@Callable(i)
func becStaking(userAddressStr: String) = {
  []
}

@Verifier(tx)
func verify() = false